{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\nimport * as fromStore from '../../store';\nimport { tap } from 'rxjs/operators';\nlet ProductItemComponent = class ProductItemComponent {\n  constructor(store) {\n    this.store = store;\n  }\n  ngOnInit() {\n    this.pizza$ = this.store.select(fromStore.getSelectedPizza).pipe(tap((pizza = null) => {\n      const pizzaExist = !!(pizza && pizza.id);\n      const toppings = pizzaExist ? pizza.toppings.map(topping => topping.id) : [];\n      this.store.dispatch(new fromStore.VisualiseToppings(toppings));\n    }));\n    this.visualise$ = this.store.select(fromStore.getPizzaVisualised);\n    this.toppings$ = this.store.select(fromStore.getAllToppings);\n  }\n  onSelect(event) {\n    this.store.dispatch(new fromStore.VisualiseToppings(event));\n  }\n  onCreate(event) {\n    this.store.dispatch(new fromStore.CreatePizza(event));\n  }\n  onUpdate(event) {\n    this.store.dispatch(new fromStore.UpdatePizza(event));\n  }\n  onRemove(event) {\n    const remove = window.confirm('Are you sure?');\n    if (remove) {\n      this.store.dispatch(new fromStore.RemovePizza(event));\n    }\n  }\n};\nProductItemComponent = __decorate([Component({\n  selector: 'product-item',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['./product-item.component.scss'],\n  template: `\n      <div \n      class=\"product-item\">\n      <pizza-form\n        [pizza]=\"pizza$ | async\"\n        [toppings]=\"toppings$ | async\"\n        (selected)=\"onSelect($event)\"\n        (create)=\"onCreate($event)\"\n        (update)=\"onUpdate($event)\"\n        (remove)=\"onRemove($event)\">\n        <pizza-display\n          [pizza]=\"visualise$ | async\">\n        </pizza-display>\n      </pizza-form>\n    </div>`\n})], ProductItemComponent);\nexport { ProductItemComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}