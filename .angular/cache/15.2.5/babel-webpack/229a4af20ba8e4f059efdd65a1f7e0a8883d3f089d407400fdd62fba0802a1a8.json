{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { StoreRouterConnectingModule, RouterStateSerializer } from '@ngrx/router-store';\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n//import { reducers, effects, customSerializer } from './store';\nimport * as fromStore from './store';\n// not used in production\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { storeFreeze } from 'ngrx-store-freeze';\n// this would be done dynamically with webpack for builds\nexport const metaReducers = !environment.production ? [storeFreeze] : [];\n// bootstrap\nimport { AppComponent } from './app.component';\nimport { environment } from 'src/environments/environment';\n// routes\nexport const ROUTES = [{\n  path: '',\n  pathMatch: 'full',\n  redirectTo: 'products'\n}, {\n  path: 'products',\n  loadChildren: () => import('../app/products/products.module').then(r => r.ProductsModule)\n  // loadChildren: '../products/products.module#ProductsModule',\n}];\n\nlet AppModule = class AppModule {};\nAppModule = __decorate([NgModule({\n  imports: [BrowserModule, BrowserAnimationsModule, RouterModule.forRoot(ROUTES), StoreModule.forRoot(fromStore.reducers, {\n    metaReducers\n  }), EffectsModule.forRoot(fromStore.effects), StoreRouterConnectingModule.forRoot({\n    serializer: fromStore.customSerializer\n  }), environment.development ? StoreDevtoolsModule.instrument() : []],\n  providers: [{\n    provide: RouterStateSerializer,\n    useClass: fromStore.customSerializer\n  }],\n  declarations: [AppComponent],\n  bootstrap: [AppComponent]\n})], AppModule);\nexport { AppModule };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}