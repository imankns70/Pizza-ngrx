{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from \"@angular/core\";\nimport { createEffect, ofType } from \"@ngrx/effects\";\nimport { of } from \"rxjs\";\nimport { catchError, map, switchMap } from \"rxjs/operators\";\nimport * as fromRoot from '../../../store';\nimport * as pizzaActions from '../actions/pizzas.action';\nlet PizzasEffects = class PizzasEffects {\n  constructor(action$, pizzaService) {\n    this.action$ = action$;\n    this.pizzaService = pizzaService;\n    this.loadPizzas$ = createEffect(() => this.action$.pipe(ofType(pizzaActions.LOAD_PIZZAS), switchMap(() => {\n      return this.pizzaService.getPizzas().pipe(map(pizzas => new pizzaActions.LoadPizzasSuccess(pizzas)), catchError(error => of(new pizzaActions.LoadPizzasFail(error))));\n    })));\n    this.createPizza$ = createEffect(() => this.action$.pipe(ofType(pizzaActions.CREATE_PIZZA), map(action => action.payload), switchMap(pizza => {\n      return this.pizzaService.createPizza(pizza).pipe(map(pizza => new pizzaActions.CreatePizzaSuccess(pizza)), catchError(error => of(new pizzaActions.CreatePizzaFail(error))));\n    })));\n    // createPizzaSuccess$ = createEffect(() => this.action$.pipe(\n    //     ofType(pizzaActions.CREATE_PIZZA_SUCCESS),\n    //     map((action: pizzaActions.CreatePizzaSuccess) => action.payload),\n    //     map(pizza => new fromRoot.Go(\n    //         {\n    //             path: ['/products', pizza.id],\n    //         }\n    //     ))\n    // ))\n    this.updatePizza$ = createEffect(() => this.action$.pipe(ofType(pizzaActions.UPDATE_PIZZA), map(action => action.payload), switchMap(pizza => {\n      return this.pizzaService.updatePizza(pizza).pipe(map(pizza => new pizzaActions.UpdatePizzaSuccess(pizza)), catchError(error => of(new pizzaActions.UpdatePizzaFail(error))));\n    })));\n    this.removePizza$ = createEffect(() => this.action$.pipe(ofType(pizzaActions.REMOVE_PIZZA), map(action => action.payload), switchMap(pizza => {\n      return this.pizzaService.removePizza(pizza).pipe(map(() => new pizzaActions.RemovePizzaSuccess(pizza)), catchError(error => of(new pizzaActions.RemovePizzaFail(error))));\n    })));\n    // handle create and update and remove the pizza\n    this.handlePizzaSuccess$ = createEffect(() => this.action$.pipe(ofType(pizzaActions.CREATE_PIZZA_SUCCESS, pizzaActions.UPDATE_PIZZA_SUCCESS, pizzaActions.REMOVE_PIZZA_SUCCESS), map(pizza => {\n      return new fromRoot.Go({\n        path: ['/products']\n      });\n    })));\n  }\n};\nPizzasEffects = __decorate([Injectable()], PizzasEffects);\nexport { PizzasEffects };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}